{"version":3,"sources":["components/card/card.component.tsx","services/save.local.storage.ts","pages/login/login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","useState","time","setTime","ome","setOme","useEffect","console","log","callbackC","runCallback","callback","asyncFunction","Promise","resolve","setTimeout","name","onClick","then","showConsole","StorageService","key","value","localStorage","setItem","JSON","stringify","parse","getItem","removeItem","LoginPage","history","useHistory","set","className","htmlFor","type","id","push","src","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6QAEaA,EAAO,SAACC,GAAgB,IAAD,EACRC,mBAAS,GADD,mBACzBC,EADyB,KACnBC,EADmB,OAEVF,mBAAS,OAFC,mBAEzBG,EAFyB,KAEpBC,EAFoB,KAIhCC,qBAAU,WACNC,QAAQC,IAAI,mBACb,CAACN,IAEJ,IASMO,EAAa,WACfF,QAAQC,IAAI,uBAGVE,EAAc,SAACC,GACjBA,KAMEC,EAAgB,WAClB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OACtBC,YAAW,kBAAMD,MAAW,SAIpC,OAAO,oCACH,6CAAmBd,EAAMgB,KAAzB,IAAgCd,EAAhC,IAAuCE,GACvC,4BAAQa,QAAS,kBA5BD,WAAe,IAAdT,EAAa,uDAAP,GACvBD,QAAQC,IAAI,UAAWA,GACvBI,IAAgBM,MAAM,WAClBf,EAAQ,GACRE,EAAO,YAEXK,EAAYD,GAsBWU,KAAvB,e,8BCrCKC,EAAb,4FAKQC,EAAaC,GACT,OAAOC,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,MAN5D,0BAWQD,GACI,OAAOI,KAAKE,MAAcJ,aAAaK,QAAQP,MAZ3D,8BAiBYA,GACA,OAAOE,aAAaM,WAAWR,OAlB3C,K,OCIaS,EAAY,SAAC9B,GAAgB,IAAD,EAELC,mBAAS,IAFJ,mBAG/B8B,GAH+B,UAGrBC,gBAEO,IAAIZ,GACZa,IAAI,YAAa,SAahC,OAAO,oCACH,yBAAKC,UAAU,+BACX,8BACO,yBAAKA,UAAU,0BACd,2BAAOC,QAAQ,YAAf,qBACA,2BAAOC,KAAK,OAAOC,GAAG,iBAAiBH,UAAU,cAErD,yBAAKA,UAAU,0BACX,4BAAQG,GAAG,QAAQpB,QAAS,WAlBxCc,EAAQO,KAAK,WAkBD,YAGR,yBAAKJ,UAAU,QACX,0BAAMA,UAAU,aAnBf,ukBAsBD,0BAAMA,UAAU,aArBd,+SAwBF,0BAAMA,UAAU,aAvBd,8VA0BF,0BAAMA,UAAU,aAzBd,sTA4BF,0BAAMA,UAAU,aA3Bd,oRA8BF,0BAAMA,UAAU,aA7Bd,0LAgCF,0BAAMA,UAAU,UAChB,0BAAMA,UAAU,SAChB,0BAAMA,UAAU,cACZ,yBAAKK,IAAI,uH,QCpCdC,MAbf,WACE,OACI,oCACA,kBAAC,IAAD,KACM,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAW5C,IACrC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,SAASC,UAAWb,QCFlCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.9cb1c31b.chunk.js","sourcesContent":["import React, {FunctionComponent, useEffect, useState} from 'react';\r\n\r\nexport const Card = (props: any) => {\r\n    const [time, setTime] = useState(0);\r\n    const [ome, setOme] = useState('ome');\r\n\r\n    useEffect(()=> {\r\n        console.log('time changed!');\r\n    }, [time]);\r\n\r\n    const showConsole = (log = '') => {\r\n        console.log('result:', log);\r\n        asyncFunction().then( () => {\r\n            setTime(1);\r\n            setOme('ome 2');\r\n        });\r\n        runCallback(callbackC);\r\n    };\r\n\r\n    const callbackC =  () => {\r\n        console.log('callback executed!');\r\n    }\r\n\r\n    const runCallback = (callback: any) => {\r\n        callback();\r\n    }\r\n\r\n    /**\r\n     * to be executed 2 seconds later\r\n     */\r\n    const asyncFunction = () => {\r\n        return new Promise(resolve =>\r\n            setTimeout(() => resolve(), 2000)\r\n        );\r\n    }\r\n\r\n    return <>\r\n        <p>Card component {props.name} {time} {ome}</p>\r\n        <button onClick={() => showConsole()}>CLICK ME!</button>\r\n    </>\r\n}\r\n","\r\nexport class StorageService {\r\n\r\n    /**\r\n     * Set the custom item in local storage\r\n     */\r\n    set(key: string, value: any) {\r\n            return localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n    /**\r\n     * get the custom item in local storage\r\n     */\r\n    get(key: string) {\r\n            return JSON.parse(<string>localStorage.getItem(key));\r\n    }\r\n    /**\r\n     * destroy the custom item in local storage\r\n     */\r\n    destroy(key: string) {\r\n            return localStorage.removeItem(key);\r\n    }\r\n\r\n}\r\n","import React, {FunctionComponent, useEffect, useState} from 'react';\r\nimport './loginStyle.scss';\r\nimport {StorageService} from '../../services/save.local.storage';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const LoginPage = (props: any) => {\r\n\r\n    const [userName, setUserName] = useState('');\r\n    const history = useHistory();\r\n\r\n    const storageService = new StorageService();\r\n    storageService.set('some_shit', 'shit!');\r\n\r\n    const handle = () => {\r\n        history.push('/game')\r\n    }\r\n\r\n    const text = 'Lorem Ipsum er ganske enkelt dummy tekst fra trykkeri- og typebransjen. Lorem Ipsum har vært bransjens standard dummy-tekst helt siden 1500-tallet, da en ukjent skriver tok en bysse av typen og krypset den for å lage en type eksemplarbok. Det har overlevd ikke bare fem århundrer, men også spranget til elektronisk setting, og forblir i hovedsak uendret. Det ble popularisert på 1960-tallet med utgivelsen av Letraset-ark som inneholder Lorem Ipsum-passasjer, og mer nylig med desktop-publiseringsprogramvare som Aldus PageMaker inkludert versjoner av Lorem Ipsum.';\r\n    const text2 = 'Den vanlige delen av Lorem Ipsum brukt siden 1500-tallet er gjengitt nedenfor for de som er interessert. Avsnittene 1.10.32 og 1.10.33 fra \"de Finibus Bonorum et Malorum\" av Cicero er også gjengitt i sin eksakte originale form, ledsaget av engelske versjoner fra 1914-oversettelsen av H. Rackham.';\r\n    const text3 = 'Aliquam fringilla luctus sagittis. Curabitur quis erat sodales, feugiat dui vel, hendrerit tellus. Vestibulum id neque ipsum. Sed interdum, lectus sit amet condimentum iaculis, mi erat ullamcorper arcu, ac fringilla nisi tortor sit amet eros. Sed sed iaculis massa. Nam sed sagittis urna. Morbi sodales blandit mi, id tristique nunc accumsan sed.';\r\n    const text4 = 'Curabitur vel vehicula eros. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Aliquam sollicitudin nibh non pellentesque ornare. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Quisque ultricies vel augue a tincidunt.';\r\n    const text5 = 'Cras porta libero ipsum, eget sagittis metus scelerisque at. Integer elementum risus eleifend, tristique eros et, convallis massa. Maecenas bibendum, quam sit amet accumsan aliquet, enim mi elementum tortor, nec condimentum dui mi vitae augue. Nunc sit amet libero turpis.';\r\n    const text6 = 'Vivamus a scelerisque eros. Curabitur in ex nunc. Donec non felis ac libero auctor ornare vitae sit amet lectus. Nulla sagittis condimentum augue, vel commodo augue gravida sit amet.';\r\n\r\n    return <>\r\n        <div className=\"container-fluid wiki-search\">\r\n            <form>\r\n                   <div className=\"inputGroup inputGroup2\">\r\n                    <label htmlFor=\"password\">Nombre de usuario</label>\r\n                    <input type=\"text\" id=\"nombre_usuario\" className=\"password\"/>\r\n                </div>\r\n                <div className=\"inputGroup inputGroup3\">\r\n                    <button id=\"login\" onClick={() => handle()}>Entrar</button>\r\n                </div>\r\n            </form>\r\n            <div className=\"book\">\r\n                <span className=\"page turn\">\r\n                    {text}\r\n                </span>\r\n                <span className=\"page turn\">\r\n                    {text2}\r\n                </span>\r\n                <span className=\"page turn\">\r\n                    {text3}\r\n                </span>\r\n                <span className=\"page turn\">\r\n                    {text4}\r\n                </span>\r\n                <span className=\"page turn\">\r\n                    {text5}\r\n                </span>\r\n                <span className=\"page turn\">\r\n                    {text6}\r\n                </span>\r\n                <span className=\"cover\"></span>\r\n                <span className=\"page\"></span>\r\n                <span className=\"cover turn\">\r\n                    <img src=\"https://ep00.epimg.net/cultura/imagenes/2013/06/15/actualidad/1371283072_174122_1371283573_noticia_normal.jpg\"/>\r\n                </span>\r\n            </div>\r\n        </div>\r\n\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport {Card} from './components/card/card.component';\r\nimport './App.css';\r\nimport {LoginPage} from \"./pages/login/login\";\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <>\r\n      <BrowserRouter >\r\n            <Switch>\r\n                <Route exact path=\"/game\" component={Card}/>\r\n                <Route exact path='/login' component={LoginPage}/>\r\n            </Switch>\r\n        </BrowserRouter>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}